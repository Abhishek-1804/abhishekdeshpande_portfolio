<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Portfolio</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Portfolio</description>
    <image>
      <title>Portfolio</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Dec 2024 19:26:41 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Nix is Awesome!</title>
      <link>http://localhost:1313/posts/first/</link>
      <pubDate>Mon, 02 Dec 2024 06:14:57 -0700</pubDate>
      <guid>http://localhost:1313/posts/first/</guid>
      <description>&lt;h1 id=&#34;the-universal-package-manager-&#34;&gt;The Universal Package Manager ðŸŒŸ&lt;/h1&gt;
&lt;p&gt;Nix is a powerful tool designed to revolutionize package management and system configuration. With its declarative approach, robust reproducibility, and ability to handle complex dependency trees, Nix has gained a reputation as one of the most innovative tools for developers, DevOps professionals, and software enthusiasts alike.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-nix&#34;&gt;Introduction to Nix&lt;/h2&gt;
&lt;p&gt;Nix is an advanced package manager that takes a &lt;strong&gt;declarative and reproducible approach&lt;/strong&gt; to managing software. Unlike traditional package managers, Nix ensures that your system remains consistent and isolated, making it easier to reproduce builds across different environments. However, Nix comes with a steep learning curve, requiring time and effort to fully grasp its concepts and capabilities, particularly for those new to declarative configurations and functional programming paradigms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Docker: Essential Commands, Best Practices, and Cool Images</title>
      <link>http://localhost:1313/posts/second/</link>
      <pubDate>Sun, 22 Dec 2024 10:50:03 -0700</pubDate>
      <guid>http://localhost:1313/posts/second/</guid>
      <description>&lt;h1 id=&#34;why-docker-unlocking-the-power-of-containerization-&#34;&gt;Why Docker: Unlocking the Power of Containerization ðŸš€&lt;/h1&gt;
&lt;p&gt;Docker provides a fantastic way to quickly explore and use tools, services, or applications without the hassle of manual installation and dependency management. Here are some cool Docker images you can experiment with, along with instructions to get started.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;basic-docker-commands-to-know&#34;&gt;Basic Docker Commands to Know&lt;/h2&gt;
&lt;p&gt;Before diving into specific images, here are some essential Docker commands every user should know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt; â€“ List all images on your system.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt; â€“ Show all containers, including stopped ones.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volumes ls&lt;/code&gt; â€“ View all Docker volumes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker networks ls&lt;/code&gt; â€“ List all Docker networks.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cool-docker-images-to-try-out&#34;&gt;Cool Docker Images to Try Out&lt;/h2&gt;
&lt;h3 id=&#34;1-linuxserverfoldingathome&#34;&gt;1. linuxserver/foldingathome&lt;/h3&gt;
&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;/h4&gt;
&lt;p&gt;The Folding@Home project lets you contribute to disease research, including cancer, Alzheimerâ€™s, and COVID-19, by donating unused computational power. This Docker image provides an easy way to join the network. You can set the account name and machine name in the CLI or do it later. If you have an NVIDIA GPU, you can enable it for better performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solid Understanding of SOLID Principles</title>
      <link>http://localhost:1313/posts/third/</link>
      <pubDate>Mon, 30 Dec 2024 19:26:41 -0700</pubDate>
      <guid>http://localhost:1313/posts/third/</guid>
      <description>&lt;p&gt;&lt;em&gt;Object-Oriented Programming (OOP) is a cornerstone of modern software development. To truly grasp advanced principles like SOLID, itâ€™s essential to start with a strong understanding of OOP fundamentals. This post will walk you through OOP concepts and then dive into the SOLID principles with simple examples to solidify your understanding.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;understanding-object-oriented-programming-oop&#34;&gt;Understanding Object-Oriented Programming (OOP)&lt;/h2&gt;
&lt;p&gt;Object-Oriented Programming revolves around the idea of representing real-world entities as objects. These objects encapsulate both data and behavior, making systems modular, reusable, and easier to maintain. Letâ€™s break down the core principles of OOP.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
